// <auto-generated />
using ExperimentTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExperimentTask.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240224112406_addTwoFieldFromExperimentResult")]
    partial class addTwoFieldFromExperimentResult
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExperimentTask.Models.ButtonColorValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ButtonColors");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentButtonColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ButtonColorValueId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ButtonColorValueId");

                    b.ToTable("ExperimentButtonColors");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceValueId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PriceValueId");

                    b.ToTable("ExperimentPrices");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperimentButtonColorId")
                        .HasColumnType("int");

                    b.Property<string>("ExperimentKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperimentPriceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentButtonColorId");

                    b.HasIndex("ExperimentPriceId");

                    b.ToTable("ExperimentResults");
                });

            modelBuilder.Entity("ExperimentTask.Models.PriceValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PriceValues");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentButtonColor", b =>
                {
                    b.HasOne("ExperimentTask.Models.ButtonColorValue", "ButtonColorValue")
                        .WithMany()
                        .HasForeignKey("ButtonColorValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ButtonColorValue");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentPrice", b =>
                {
                    b.HasOne("ExperimentTask.Models.PriceValue", "PriceValue")
                        .WithMany()
                        .HasForeignKey("PriceValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceValue");
                });

            modelBuilder.Entity("ExperimentTask.Models.ExperimentResult", b =>
                {
                    b.HasOne("ExperimentTask.Models.ExperimentButtonColor", "ExperimentButtonColor")
                        .WithMany()
                        .HasForeignKey("ExperimentButtonColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExperimentTask.Models.ExperimentPrice", "ExperimentPrice")
                        .WithMany()
                        .HasForeignKey("ExperimentPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExperimentButtonColor");

                    b.Navigation("ExperimentPrice");
                });
#pragma warning restore 612, 618
        }
    }
}
